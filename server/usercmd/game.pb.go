// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: game.proto

package usercmd

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 客户端发送的消息类型***
type MsgTypeCmd int32

const (
	MsgTypeCmd_None           MsgTypeCmd = 0
	MsgTypeCmd_Login          MsgTypeCmd = 1
	MsgTypeCmd_Top            MsgTypeCmd = 2
	MsgTypeCmd_AddPlayer      MsgTypeCmd = 3
	MsgTypeCmd_RemovePlayer   MsgTypeCmd = 4
	MsgTypeCmd_Scene          MsgTypeCmd = 5
	MsgTypeCmd_Move           MsgTypeCmd = 6
	MsgTypeCmd_PutBomb        MsgTypeCmd = 7
	MsgTypeCmd_LoadGameMap    MsgTypeCmd = 8
	MsgTypeCmd_Death          MsgTypeCmd = 10
	MsgTypeCmd_EndRoom        MsgTypeCmd = 11
	MsgTypeCmd_NewScene       MsgTypeCmd = 13
	MsgTypeCmd_ReSetNet       MsgTypeCmd = 15
	MsgTypeCmd_HeartBeat      MsgTypeCmd = 16
	MsgTypeCmd_SystemMsg      MsgTypeCmd = 22
	MsgTypeCmd_ErrorMsg       MsgTypeCmd = 23
	MsgTypeCmd_PlayerState    MsgTypeCmd = 72
	MsgTypeCmd_SceneSync      MsgTypeCmd = 100
	MsgTypeCmd_InitSyncData   MsgTypeCmd = 101
	MsgTypeCmd_AddPlayers     MsgTypeCmd = 102
	MsgTypeCmd_AddBalls       MsgTypeCmd = 104
	MsgTypeCmd_RemoveBalls    MsgTypeCmd = 105
	MsgTypeCmd_SetSceneData   MsgTypeCmd = 106
	MsgTypeCmd_CheckSyncData  MsgTypeCmd = 108
	MsgTypeCmd_SetPlayerAttrs MsgTypeCmd = 109
	MsgTypeCmd_UserStateSet   MsgTypeCmd = 111
	MsgTypeCmd_UserStateClr   MsgTypeCmd = 112
)

var MsgTypeCmd_name = map[int32]string{
	0:   "None",
	1:   "Login",
	2:   "Top",
	3:   "AddPlayer",
	4:   "RemovePlayer",
	5:   "Scene",
	6:   "Move",
	7:   "PutBomb",
	8:   "LoadGameMap",
	10:  "Death",
	11:  "EndRoom",
	13:  "NewScene",
	15:  "ReSetNet",
	16:  "HeartBeat",
	22:  "SystemMsg",
	23:  "ErrorMsg",
	72:  "PlayerState",
	100: "SceneSync",
	101: "InitSyncData",
	102: "AddPlayers",
	104: "AddBalls",
	105: "RemoveBalls",
	106: "SetSceneData",
	108: "CheckSyncData",
	109: "SetPlayerAttrs",
	111: "UserStateSet",
	112: "UserStateClr",
}

var MsgTypeCmd_value = map[string]int32{
	"None":           0,
	"Login":          1,
	"Top":            2,
	"AddPlayer":      3,
	"RemovePlayer":   4,
	"Scene":          5,
	"Move":           6,
	"PutBomb":        7,
	"LoadGameMap":    8,
	"Death":          10,
	"EndRoom":        11,
	"NewScene":       13,
	"ReSetNet":       15,
	"HeartBeat":      16,
	"SystemMsg":      22,
	"ErrorMsg":       23,
	"PlayerState":    72,
	"SceneSync":      100,
	"InitSyncData":   101,
	"AddPlayers":     102,
	"AddBalls":       104,
	"RemoveBalls":    105,
	"SetSceneData":   106,
	"CheckSyncData":  108,
	"SetPlayerAttrs": 109,
	"UserStateSet":   111,
	"UserStateClr":   112,
}

func (x MsgTypeCmd) String() string {
	return proto.EnumName(MsgTypeCmd_name, int32(x))
}

func (MsgTypeCmd) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_38fc58335341d769, []int{0}
}

type CellType int32

const (
	CellType_Space CellType = 0
	CellType_Wall  CellType = 1
	CellType_Box   CellType = 2
	CellType_Bomb  CellType = 3
)

var CellType_name = map[int32]string{
	0: "Space",
	1: "Wall",
	2: "Box",
	3: "Bomb",
}

var CellType_value = map[string]int32{
	"Space": 0,
	"Wall":  1,
	"Box":   2,
	"Bomb":  3,
}

func (x CellType) String() string {
	return proto.EnumName(CellType_name, int32(x))
}

func (CellType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_38fc58335341d769, []int{1}
}

type CmdHeader struct {
	Cmd                  MsgTypeCmd `protobuf:"varint,1,opt,name=Cmd,proto3,enum=usercmd.MsgTypeCmd" json:"Cmd,omitempty"`
	Data                 string     `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *CmdHeader) Reset()         { *m = CmdHeader{} }
func (m *CmdHeader) String() string { return proto.CompactTextString(m) }
func (*CmdHeader) ProtoMessage()    {}
func (*CmdHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_38fc58335341d769, []int{0}
}
func (m *CmdHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CmdHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CmdHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CmdHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CmdHeader.Merge(m, src)
}
func (m *CmdHeader) XXX_Size() int {
	return m.Size()
}
func (m *CmdHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_CmdHeader.DiscardUnknown(m)
}

var xxx_messageInfo_CmdHeader proto.InternalMessageInfo

func (m *CmdHeader) GetCmd() MsgTypeCmd {
	if m != nil {
		return m.Cmd
	}
	return MsgTypeCmd_None
}

func (m *CmdHeader) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type UserLoginInfo struct {
	Token                string   `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserLoginInfo) Reset()         { *m = UserLoginInfo{} }
func (m *UserLoginInfo) String() string { return proto.CompactTextString(m) }
func (*UserLoginInfo) ProtoMessage()    {}
func (*UserLoginInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_38fc58335341d769, []int{1}
}
func (m *UserLoginInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserLoginInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserLoginInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserLoginInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserLoginInfo.Merge(m, src)
}
func (m *UserLoginInfo) XXX_Size() int {
	return m.Size()
}
func (m *UserLoginInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UserLoginInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UserLoginInfo proto.InternalMessageInfo

func (m *UserLoginInfo) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type MsgPlayer struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Score                uint32   `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`
	Hp                   uint32   `protobuf:"varint,4,opt,name=hp,proto3" json:"hp,omitempty"`
	Curbomb              uint32   `protobuf:"varint,5,opt,name=curbomb,proto3" json:"curbomb,omitempty"`
	Maxbomb              uint32   `protobuf:"varint,6,opt,name=maxbomb,proto3" json:"maxbomb,omitempty"`
	Power                uint32   `protobuf:"varint,7,opt,name=power,proto3" json:"power,omitempty"`
	Speed                uint32   `protobuf:"varint,8,opt,name=speed,proto3" json:"speed,omitempty"`
	PosX                 int32    `protobuf:"varint,9,opt,name=posX,proto3" json:"posX,omitempty"`
	PosY                 int32    `protobuf:"varint,10,opt,name=posY,proto3" json:"posY,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgPlayer) Reset()         { *m = MsgPlayer{} }
func (m *MsgPlayer) String() string { return proto.CompactTextString(m) }
func (*MsgPlayer) ProtoMessage()    {}
func (*MsgPlayer) Descriptor() ([]byte, []int) {
	return fileDescriptor_38fc58335341d769, []int{2}
}
func (m *MsgPlayer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPlayer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPlayer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPlayer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPlayer.Merge(m, src)
}
func (m *MsgPlayer) XXX_Size() int {
	return m.Size()
}
func (m *MsgPlayer) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPlayer.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPlayer proto.InternalMessageInfo

func (m *MsgPlayer) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MsgPlayer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgPlayer) GetScore() uint32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *MsgPlayer) GetHp() uint32 {
	if m != nil {
		return m.Hp
	}
	return 0
}

func (m *MsgPlayer) GetCurbomb() uint32 {
	if m != nil {
		return m.Curbomb
	}
	return 0
}

func (m *MsgPlayer) GetMaxbomb() uint32 {
	if m != nil {
		return m.Maxbomb
	}
	return 0
}

func (m *MsgPlayer) GetPower() uint32 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *MsgPlayer) GetSpeed() uint32 {
	if m != nil {
		return m.Speed
	}
	return 0
}

func (m *MsgPlayer) GetPosX() int32 {
	if m != nil {
		return m.PosX
	}
	return 0
}

func (m *MsgPlayer) GetPosY() int32 {
	if m != nil {
		return m.PosY
	}
	return 0
}

// 炸弹
type BombData struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PosX                 int32    `protobuf:"varint,2,opt,name=posX,proto3" json:"posX,omitempty"`
	PosY                 int32    `protobuf:"varint,3,opt,name=posY,proto3" json:"posY,omitempty"`
	Power                uint32   `protobuf:"varint,4,opt,name=power,proto3" json:"power,omitempty"`
	Owner                uint64   `protobuf:"varint,5,opt,name=owner,proto3" json:"owner,omitempty"`
	ExistTm              uint32   `protobuf:"varint,6,opt,name=existTm,proto3" json:"existTm,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BombData) Reset()         { *m = BombData{} }
func (m *BombData) String() string { return proto.CompactTextString(m) }
func (*BombData) ProtoMessage()    {}
func (*BombData) Descriptor() ([]byte, []int) {
	return fileDescriptor_38fc58335341d769, []int{3}
}
func (m *BombData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BombData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BombData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BombData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BombData.Merge(m, src)
}
func (m *BombData) XXX_Size() int {
	return m.Size()
}
func (m *BombData) XXX_DiscardUnknown() {
	xxx_messageInfo_BombData.DiscardUnknown(m)
}

var xxx_messageInfo_BombData proto.InternalMessageInfo

func (m *BombData) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BombData) GetPosX() int32 {
	if m != nil {
		return m.PosX
	}
	return 0
}

func (m *BombData) GetPosY() int32 {
	if m != nil {
		return m.PosY
	}
	return 0
}

func (m *BombData) GetPower() uint32 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *BombData) GetOwner() uint64 {
	if m != nil {
		return m.Owner
	}
	return 0
}

func (m *BombData) GetExistTm() uint32 {
	if m != nil {
		return m.ExistTm
	}
	return 0
}

// 请求移动
type MsgMove struct {
	Way                  int32    `protobuf:"varint,1,opt,name=way,proto3" json:"way,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgMove) Reset()         { *m = MsgMove{} }
func (m *MsgMove) String() string { return proto.CompactTextString(m) }
func (*MsgMove) ProtoMessage()    {}
func (*MsgMove) Descriptor() ([]byte, []int) {
	return fileDescriptor_38fc58335341d769, []int{4}
}
func (m *MsgMove) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMove) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMove.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMove) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMove.Merge(m, src)
}
func (m *MsgMove) XXX_Size() int {
	return m.Size()
}
func (m *MsgMove) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMove.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMove proto.InternalMessageInfo

func (m *MsgMove) GetWay() int32 {
	if m != nil {
		return m.Way
	}
	return 0
}

// 请求放置炸弹（tmp）
type MsgPutBomb struct {
	None                 bool     `protobuf:"varint,1,opt,name=None,proto3" json:"None,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgPutBomb) Reset()         { *m = MsgPutBomb{} }
func (m *MsgPutBomb) String() string { return proto.CompactTextString(m) }
func (*MsgPutBomb) ProtoMessage()    {}
func (*MsgPutBomb) Descriptor() ([]byte, []int) {
	return fileDescriptor_38fc58335341d769, []int{5}
}
func (m *MsgPutBomb) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPutBomb) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPutBomb.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPutBomb) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPutBomb.Merge(m, src)
}
func (m *MsgPutBomb) XXX_Size() int {
	return m.Size()
}
func (m *MsgPutBomb) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPutBomb.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPutBomb proto.InternalMessageInfo

func (m *MsgPutBomb) GetNone() bool {
	if m != nil {
		return m.None
	}
	return false
}

// 返回玩家场景信息
type RetRoleScene struct {
	PosX                 int32    `protobuf:"varint,1,opt,name=posX,proto3" json:"posX,omitempty"`
	PosY                 int32    `protobuf:"varint,2,opt,name=posY,proto3" json:"posY,omitempty"`
	Hp                   uint32   `protobuf:"varint,3,opt,name=hp,proto3" json:"hp,omitempty"`
	Power                uint32   `protobuf:"varint,4,opt,name=power,proto3" json:"power,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RetRoleScene) Reset()         { *m = RetRoleScene{} }
func (m *RetRoleScene) String() string { return proto.CompactTextString(m) }
func (*RetRoleScene) ProtoMessage()    {}
func (*RetRoleScene) Descriptor() ([]byte, []int) {
	return fileDescriptor_38fc58335341d769, []int{6}
}
func (m *RetRoleScene) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetRoleScene) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetRoleScene.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetRoleScene) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetRoleScene.Merge(m, src)
}
func (m *RetRoleScene) XXX_Size() int {
	return m.Size()
}
func (m *RetRoleScene) XXX_DiscardUnknown() {
	xxx_messageInfo_RetRoleScene.DiscardUnknown(m)
}

var xxx_messageInfo_RetRoleScene proto.InternalMessageInfo

func (m *RetRoleScene) GetPosX() int32 {
	if m != nil {
		return m.PosX
	}
	return 0
}

func (m *RetRoleScene) GetPosY() int32 {
	if m != nil {
		return m.PosY
	}
	return 0
}

func (m *RetRoleScene) GetHp() uint32 {
	if m != nil {
		return m.Hp
	}
	return 0
}

func (m *RetRoleScene) GetPower() uint32 {
	if m != nil {
		return m.Power
	}
	return 0
}

// 返回死亡
type RetRoleDeath struct {
	KillName             string   `protobuf:"bytes,1,opt,name=killName,proto3" json:"killName,omitempty"`
	KillId               uint64   `protobuf:"varint,2,opt,name=killId,proto3" json:"killId,omitempty"`
	LiveTime             uint32   `protobuf:"varint,3,opt,name=liveTime,proto3" json:"liveTime,omitempty"`
	Score                uint32   `protobuf:"varint,4,opt,name=score,proto3" json:"score,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RetRoleDeath) Reset()         { *m = RetRoleDeath{} }
func (m *RetRoleDeath) String() string { return proto.CompactTextString(m) }
func (*RetRoleDeath) ProtoMessage()    {}
func (*RetRoleDeath) Descriptor() ([]byte, []int) {
	return fileDescriptor_38fc58335341d769, []int{7}
}
func (m *RetRoleDeath) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetRoleDeath) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetRoleDeath.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetRoleDeath) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetRoleDeath.Merge(m, src)
}
func (m *RetRoleDeath) XXX_Size() int {
	return m.Size()
}
func (m *RetRoleDeath) XXX_DiscardUnknown() {
	xxx_messageInfo_RetRoleDeath.DiscardUnknown(m)
}

var xxx_messageInfo_RetRoleDeath proto.InternalMessageInfo

func (m *RetRoleDeath) GetKillName() string {
	if m != nil {
		return m.KillName
	}
	return ""
}

func (m *RetRoleDeath) GetKillId() uint64 {
	if m != nil {
		return m.KillId
	}
	return 0
}

func (m *RetRoleDeath) GetLiveTime() uint32 {
	if m != nil {
		return m.LiveTime
	}
	return 0
}

func (m *RetRoleDeath) GetScore() uint32 {
	if m != nil {
		return m.Score
	}
	return 0
}

// 返回统一错误码
type RetErrorMsgCmd struct {
	RetCode              uint32   `protobuf:"varint,1,opt,name=RetCode,proto3" json:"RetCode,omitempty"`
	Params               uint32   `protobuf:"varint,2,opt,name=Params,proto3" json:"Params,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RetErrorMsgCmd) Reset()         { *m = RetErrorMsgCmd{} }
func (m *RetErrorMsgCmd) String() string { return proto.CompactTextString(m) }
func (*RetErrorMsgCmd) ProtoMessage()    {}
func (*RetErrorMsgCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_38fc58335341d769, []int{8}
}
func (m *RetErrorMsgCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetErrorMsgCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetErrorMsgCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetErrorMsgCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetErrorMsgCmd.Merge(m, src)
}
func (m *RetErrorMsgCmd) XXX_Size() int {
	return m.Size()
}
func (m *RetErrorMsgCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_RetErrorMsgCmd.DiscardUnknown(m)
}

var xxx_messageInfo_RetErrorMsgCmd proto.InternalMessageInfo

func (m *RetErrorMsgCmd) GetRetCode() uint32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *RetErrorMsgCmd) GetParams() uint32 {
	if m != nil {
		return m.Params
	}
	return 0
}

// 炸弹信息
type MsgBomb struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Own                  uint64   `protobuf:"varint,3,opt,name=own,proto3" json:"own,omitempty"`
	X                    int32    `protobuf:"varint,6,opt,name=x,proto3" json:"x,omitempty"`
	Y                    int32    `protobuf:"varint,7,opt,name=y,proto3" json:"y,omitempty"`
	IsDelete             bool     `protobuf:"varint,10,opt,name=isDelete,proto3" json:"isDelete,omitempty"`
	CreateTime           uint32   `protobuf:"varint,12,opt,name=createTime,proto3" json:"createTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgBomb) Reset()         { *m = MsgBomb{} }
func (m *MsgBomb) String() string { return proto.CompactTextString(m) }
func (*MsgBomb) ProtoMessage()    {}
func (*MsgBomb) Descriptor() ([]byte, []int) {
	return fileDescriptor_38fc58335341d769, []int{9}
}
func (m *MsgBomb) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBomb) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBomb.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBomb) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBomb.Merge(m, src)
}
func (m *MsgBomb) XXX_Size() int {
	return m.Size()
}
func (m *MsgBomb) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBomb.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBomb proto.InternalMessageInfo

func (m *MsgBomb) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MsgBomb) GetOwn() uint64 {
	if m != nil {
		return m.Own
	}
	return 0
}

func (m *MsgBomb) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *MsgBomb) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *MsgBomb) GetIsDelete() bool {
	if m != nil {
		return m.IsDelete
	}
	return false
}

func (m *MsgBomb) GetCreateTime() uint32 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

// 场景玩家信息
type ScenePlayer struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	BombNum              uint32   `protobuf:"varint,2,opt,name=BombNum,proto3" json:"BombNum,omitempty"`
	Power                uint32   `protobuf:"varint,3,opt,name=power,proto3" json:"power,omitempty"`
	Speed                float32  `protobuf:"fixed32,4,opt,name=speed,proto3" json:"speed,omitempty"`
	State                uint32   `protobuf:"varint,5,opt,name=state,proto3" json:"state,omitempty"`
	X                    float32  `protobuf:"fixed32,6,opt,name=X,proto3" json:"X,omitempty"`
	Y                    float32  `protobuf:"fixed32,7,opt,name=Y,proto3" json:"Y,omitempty"`
	IsMove               bool     `protobuf:"varint,8,opt,name=isMove,proto3" json:"isMove,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScenePlayer) Reset()         { *m = ScenePlayer{} }
func (m *ScenePlayer) String() string { return proto.CompactTextString(m) }
func (*ScenePlayer) ProtoMessage()    {}
func (*ScenePlayer) Descriptor() ([]byte, []int) {
	return fileDescriptor_38fc58335341d769, []int{10}
}
func (m *ScenePlayer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScenePlayer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScenePlayer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScenePlayer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScenePlayer.Merge(m, src)
}
func (m *ScenePlayer) XXX_Size() int {
	return m.Size()
}
func (m *ScenePlayer) XXX_DiscardUnknown() {
	xxx_messageInfo_ScenePlayer.DiscardUnknown(m)
}

var xxx_messageInfo_ScenePlayer proto.InternalMessageInfo

func (m *ScenePlayer) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ScenePlayer) GetBombNum() uint32 {
	if m != nil {
		return m.BombNum
	}
	return 0
}

func (m *ScenePlayer) GetPower() uint32 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *ScenePlayer) GetSpeed() float32 {
	if m != nil {
		return m.Speed
	}
	return 0
}

func (m *ScenePlayer) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *ScenePlayer) GetX() float32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *ScenePlayer) GetY() float32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *ScenePlayer) GetIsMove() bool {
	if m != nil {
		return m.IsMove
	}
	return false
}

// 返回客户端场景更新信息
type RetUpdateSceneMsg struct {
	Id                   uint64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	X                    float32        `protobuf:"fixed32,2,opt,name=X,proto3" json:"X,omitempty"`
	Y                    float32        `protobuf:"fixed32,3,opt,name=Y,proto3" json:"Y,omitempty"`
	Players              []*ScenePlayer `protobuf:"bytes,4,rep,name=players,proto3" json:"players,omitempty"`
	Bombs                []*MsgBomb     `protobuf:"bytes,5,rep,name=bombs,proto3" json:"bombs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *RetUpdateSceneMsg) Reset()         { *m = RetUpdateSceneMsg{} }
func (m *RetUpdateSceneMsg) String() string { return proto.CompactTextString(m) }
func (*RetUpdateSceneMsg) ProtoMessage()    {}
func (*RetUpdateSceneMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_38fc58335341d769, []int{11}
}
func (m *RetUpdateSceneMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetUpdateSceneMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetUpdateSceneMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetUpdateSceneMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetUpdateSceneMsg.Merge(m, src)
}
func (m *RetUpdateSceneMsg) XXX_Size() int {
	return m.Size()
}
func (m *RetUpdateSceneMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_RetUpdateSceneMsg.DiscardUnknown(m)
}

var xxx_messageInfo_RetUpdateSceneMsg proto.InternalMessageInfo

func (m *RetUpdateSceneMsg) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RetUpdateSceneMsg) GetX() float32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *RetUpdateSceneMsg) GetY() float32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *RetUpdateSceneMsg) GetPlayers() []*ScenePlayer {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *RetUpdateSceneMsg) GetBombs() []*MsgBomb {
	if m != nil {
		return m.Bombs
	}
	return nil
}

// 地图
type MapGridData struct {
	X                    int32    `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y                    int32    `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
	IsBoom               bool     `protobuf:"varint,4,opt,name=isBoom,proto3" json:"isBoom,omitempty"`
	IsWall               bool     `protobuf:"varint,5,opt,name=isWall,proto3" json:"isWall,omitempty"`
	IsCanDestoryWall     bool     `protobuf:"varint,6,opt,name=isCanDestoryWall,proto3" json:"isCanDestoryWall,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MapGridData) Reset()         { *m = MapGridData{} }
func (m *MapGridData) String() string { return proto.CompactTextString(m) }
func (*MapGridData) ProtoMessage()    {}
func (*MapGridData) Descriptor() ([]byte, []int) {
	return fileDescriptor_38fc58335341d769, []int{12}
}
func (m *MapGridData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapGridData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapGridData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapGridData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapGridData.Merge(m, src)
}
func (m *MapGridData) XXX_Size() int {
	return m.Size()
}
func (m *MapGridData) XXX_DiscardUnknown() {
	xxx_messageInfo_MapGridData.DiscardUnknown(m)
}

var xxx_messageInfo_MapGridData proto.InternalMessageInfo

func (m *MapGridData) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *MapGridData) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *MapGridData) GetIsBoom() bool {
	if m != nil {
		return m.IsBoom
	}
	return false
}

func (m *MapGridData) GetIsWall() bool {
	if m != nil {
		return m.IsWall
	}
	return false
}

func (m *MapGridData) GetIsCanDestoryWall() bool {
	if m != nil {
		return m.IsCanDestoryWall
	}
	return false
}

type Map struct {
	MapGrids             []*MapGridData `protobuf:"bytes,1,rep,name=MapGrids,proto3" json:"MapGrids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Map) Reset()         { *m = Map{} }
func (m *Map) String() string { return proto.CompactTextString(m) }
func (*Map) ProtoMessage()    {}
func (*Map) Descriptor() ([]byte, []int) {
	return fileDescriptor_38fc58335341d769, []int{13}
}
func (m *Map) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Map) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Map.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Map) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Map.Merge(m, src)
}
func (m *Map) XXX_Size() int {
	return m.Size()
}
func (m *Map) XXX_DiscardUnknown() {
	xxx_messageInfo_Map.DiscardUnknown(m)
}

var xxx_messageInfo_Map proto.InternalMessageInfo

func (m *Map) GetMapGrids() []*MapGridData {
	if m != nil {
		return m.MapGrids
	}
	return nil
}

type MapVector struct {
	Col                  []*MapVector_Row `protobuf:"bytes,1,rep,name=Col,proto3" json:"Col,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *MapVector) Reset()         { *m = MapVector{} }
func (m *MapVector) String() string { return proto.CompactTextString(m) }
func (*MapVector) ProtoMessage()    {}
func (*MapVector) Descriptor() ([]byte, []int) {
	return fileDescriptor_38fc58335341d769, []int{14}
}
func (m *MapVector) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapVector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapVector.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapVector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapVector.Merge(m, src)
}
func (m *MapVector) XXX_Size() int {
	return m.Size()
}
func (m *MapVector) XXX_DiscardUnknown() {
	xxx_messageInfo_MapVector.DiscardUnknown(m)
}

var xxx_messageInfo_MapVector proto.InternalMessageInfo

func (m *MapVector) GetCol() []*MapVector_Row {
	if m != nil {
		return m.Col
	}
	return nil
}

type MapVector_Row struct {
	X                    []CellType `protobuf:"varint,1,rep,packed,name=x,proto3,enum=usercmd.CellType" json:"x,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *MapVector_Row) Reset()         { *m = MapVector_Row{} }
func (m *MapVector_Row) String() string { return proto.CompactTextString(m) }
func (*MapVector_Row) ProtoMessage()    {}
func (*MapVector_Row) Descriptor() ([]byte, []int) {
	return fileDescriptor_38fc58335341d769, []int{14, 0}
}
func (m *MapVector_Row) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapVector_Row) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapVector_Row.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapVector_Row) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapVector_Row.Merge(m, src)
}
func (m *MapVector_Row) XXX_Size() int {
	return m.Size()
}
func (m *MapVector_Row) XXX_DiscardUnknown() {
	xxx_messageInfo_MapVector_Row.DiscardUnknown(m)
}

var xxx_messageInfo_MapVector_Row proto.InternalMessageInfo

func (m *MapVector_Row) GetX() []CellType {
	if m != nil {
		return m.X
	}
	return nil
}

func init() {
	proto.RegisterEnum("usercmd.MsgTypeCmd", MsgTypeCmd_name, MsgTypeCmd_value)
	proto.RegisterEnum("usercmd.CellType", CellType_name, CellType_value)
	proto.RegisterType((*CmdHeader)(nil), "usercmd.CmdHeader")
	proto.RegisterType((*UserLoginInfo)(nil), "usercmd.UserLoginInfo")
	proto.RegisterType((*MsgPlayer)(nil), "usercmd.MsgPlayer")
	proto.RegisterType((*BombData)(nil), "usercmd.BombData")
	proto.RegisterType((*MsgMove)(nil), "usercmd.MsgMove")
	proto.RegisterType((*MsgPutBomb)(nil), "usercmd.MsgPutBomb")
	proto.RegisterType((*RetRoleScene)(nil), "usercmd.RetRoleScene")
	proto.RegisterType((*RetRoleDeath)(nil), "usercmd.RetRoleDeath")
	proto.RegisterType((*RetErrorMsgCmd)(nil), "usercmd.RetErrorMsgCmd")
	proto.RegisterType((*MsgBomb)(nil), "usercmd.MsgBomb")
	proto.RegisterType((*ScenePlayer)(nil), "usercmd.ScenePlayer")
	proto.RegisterType((*RetUpdateSceneMsg)(nil), "usercmd.RetUpdateSceneMsg")
	proto.RegisterType((*MapGridData)(nil), "usercmd.MapGridData")
	proto.RegisterType((*Map)(nil), "usercmd.Map")
	proto.RegisterType((*MapVector)(nil), "usercmd.MapVector")
	proto.RegisterType((*MapVector_Row)(nil), "usercmd.MapVector.Row")
}

func init() { proto.RegisterFile("game.proto", fileDescriptor_38fc58335341d769) }

var fileDescriptor_38fc58335341d769 = []byte{
	// 1081 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x56, 0xcf, 0x6e, 0xdb, 0xc6,
	0x13, 0xce, 0x92, 0x92, 0x45, 0x8d, 0x2c, 0x67, 0xb3, 0xbf, 0x20, 0x3f, 0x22, 0x2d, 0x5c, 0x81,
	0x40, 0x02, 0x21, 0x07, 0xb5, 0x70, 0x0f, 0x3d, 0xf4, 0x14, 0xc9, 0x69, 0x6c, 0x20, 0x32, 0x82,
	0x95, 0xd3, 0xda, 0x45, 0x7b, 0x58, 0x8b, 0x1b, 0x99, 0x35, 0xc9, 0x25, 0xc8, 0xb5, 0x25, 0x9d,
	0x8b, 0x02, 0x7d, 0x83, 0xf6, 0xd0, 0x57, 0xe8, 0x7b, 0xf4, 0xd8, 0x17, 0x28, 0x50, 0xb8, 0x2f,
	0x52, 0xcc, 0xf0, 0x8f, 0x65, 0xc7, 0xbd, 0xed, 0x37, 0x9c, 0xfd, 0xf6, 0x9b, 0xf9, 0x66, 0x57,
	0x02, 0x58, 0xa8, 0x44, 0x8f, 0xb2, 0xdc, 0x58, 0x23, 0x3a, 0x97, 0x85, 0xce, 0xe7, 0x49, 0x18,
	0x7c, 0x05, 0xdd, 0x49, 0x12, 0x1e, 0x68, 0x15, 0xea, 0x5c, 0x3c, 0x03, 0x77, 0x92, 0x84, 0x3e,
	0x1b, 0xb0, 0xe1, 0xce, 0xde, 0xff, 0x46, 0x55, 0xce, 0x68, 0x5a, 0x2c, 0x8e, 0xd7, 0x99, 0x9e,
	0x24, 0xa1, 0xc4, 0xef, 0x42, 0x40, 0x6b, 0x5f, 0x59, 0xe5, 0x3b, 0x03, 0x36, 0xec, 0x4a, 0x5a,
	0x07, 0xcf, 0xa0, 0xff, 0xae, 0xd0, 0xf9, 0x1b, 0xb3, 0x88, 0xd2, 0xc3, 0xf4, 0xbd, 0x11, 0x8f,
	0xa1, 0x7d, 0x6c, 0x2e, 0x74, 0x4a, 0x6c, 0x5d, 0x59, 0x82, 0xe0, 0x2f, 0x06, 0xdd, 0x69, 0xb1,
	0x78, 0x1b, 0xab, 0xb5, 0xce, 0xc5, 0x0e, 0x38, 0x51, 0x79, 0x5c, 0x4b, 0x3a, 0x11, 0x11, 0xa7,
	0x2a, 0xd1, 0x35, 0x31, 0xae, 0x91, 0xa7, 0x98, 0x9b, 0x5c, 0xfb, 0xee, 0x80, 0x0d, 0xfb, 0xb2,
	0x04, 0xb8, 0xf3, 0x3c, 0xf3, 0x5b, 0x14, 0x72, 0xce, 0x33, 0xe1, 0x43, 0x67, 0x7e, 0x99, 0x9f,
	0x99, 0xe4, 0xcc, 0x6f, 0x53, 0xb0, 0x86, 0xf8, 0x25, 0x51, 0x2b, 0xfa, 0xb2, 0x55, 0x7e, 0xa9,
	0x20, 0x32, 0x67, 0x66, 0xa9, 0x73, 0xbf, 0x53, 0x32, 0x13, 0xa0, 0xf3, 0x32, 0xad, 0x43, 0xdf,
	0xab, 0xce, 0x43, 0x80, 0xca, 0x32, 0x53, 0x9c, 0xf8, 0xdd, 0x01, 0x1b, 0xb6, 0x25, 0xad, 0xab,
	0xd8, 0xa9, 0x0f, 0x4d, 0xec, 0x34, 0xf8, 0x99, 0x81, 0x37, 0x36, 0xc9, 0x19, 0xf6, 0x64, 0xa3,
	0xbc, 0x7e, 0x5d, 0x1e, 0x91, 0x38, 0xf7, 0x90, 0xb8, 0x37, 0x24, 0x37, 0xc2, 0x5a, 0x77, 0x84,
	0x99, 0x65, 0xaa, 0x73, 0x2a, 0xb0, 0x25, 0x4b, 0x80, 0xe5, 0xe9, 0x55, 0x54, 0xd8, 0xe3, 0xa4,
	0x2e, 0xaf, 0x82, 0xc1, 0x47, 0xd0, 0x99, 0x16, 0x8b, 0xa9, 0xb9, 0xd2, 0x82, 0x83, 0xbb, 0x54,
	0x6b, 0x52, 0xd2, 0x96, 0xb8, 0x0c, 0x06, 0x00, 0x68, 0xc3, 0xa5, 0x45, 0xb1, 0x28, 0xe2, 0xc8,
	0xa4, 0x9a, 0x12, 0x3c, 0x49, 0xeb, 0xe0, 0x3b, 0xd8, 0x96, 0xda, 0x4a, 0x13, 0xeb, 0xd9, 0x5c,
	0xa7, 0xba, 0x11, 0xcf, 0xee, 0x11, 0xef, 0x6c, 0x88, 0x2f, 0x9d, 0x71, 0x1b, 0x67, 0xee, 0x2d,
	0x26, 0xb0, 0x0d, 0xfb, 0xbe, 0x56, 0xf6, 0x5c, 0x3c, 0x05, 0xef, 0x22, 0x8a, 0xe3, 0x23, 0x74,
	0xbf, 0x1c, 0x98, 0x06, 0x8b, 0x27, 0xb0, 0x85, 0xeb, 0xc3, 0x90, 0xce, 0x69, 0xc9, 0x0a, 0xe1,
	0x9e, 0x38, 0xba, 0xd2, 0xc7, 0x51, 0x52, 0x0f, 0x47, 0x83, 0x6f, 0xa6, 0xa6, 0xb5, 0x31, 0x35,
	0xc1, 0x18, 0x76, 0xa4, 0xb6, 0xaf, 0xf2, 0xdc, 0xe4, 0xd3, 0x62, 0x81, 0xa3, 0xec, 0x43, 0x47,
	0x6a, 0x3b, 0x31, 0xa1, 0xae, 0x7c, 0xaa, 0x21, 0x9e, 0xfa, 0x56, 0xe5, 0x2a, 0x29, 0xe8, 0xd4,
	0xbe, 0xac, 0x50, 0xf0, 0x23, 0xa3, 0xbe, 0x52, 0xdf, 0xee, 0x1a, 0xcc, 0xc1, 0x35, 0xcb, 0x94,
	0xc4, 0xb4, 0x24, 0x2e, 0xc5, 0x36, 0xb0, 0x15, 0x19, 0xd3, 0x96, 0x6c, 0x85, 0x68, 0x4d, 0xd3,
	0xd6, 0x96, 0x6c, 0x8d, 0xfa, 0xa3, 0x62, 0x5f, 0xc7, 0xda, 0x6a, 0x9a, 0x21, 0x4f, 0x36, 0x58,
	0xec, 0x02, 0xcc, 0x73, 0xad, 0x6c, 0x59, 0xdd, 0x36, 0x9d, 0xb0, 0x11, 0x09, 0x7e, 0x67, 0xd0,
	0x23, 0x5f, 0xfe, 0xe3, 0x26, 0xf9, 0xd0, 0x41, 0x85, 0x47, 0x97, 0x49, 0x25, 0xbf, 0x86, 0x37,
	0x7e, 0xb8, 0xf7, 0x4e, 0x3d, 0xf6, 0xcb, 0xa9, 0xa7, 0x1e, 0xa3, 0x56, 0x59, 0x5d, 0xdd, 0xa9,
	0x12, 0x60, 0x15, 0x27, 0x54, 0x93, 0x23, 0xd9, 0x09, 0xa2, 0x53, 0xaa, 0xc9, 0x91, 0xec, 0x14,
	0xbb, 0x16, 0x15, 0x38, 0x73, 0x74, 0x7d, 0x3c, 0x59, 0xa1, 0xe0, 0x17, 0x06, 0x8f, 0xa4, 0xb6,
	0xef, 0xb2, 0x50, 0xd9, 0x72, 0xa0, 0xa6, 0xc5, 0xe2, 0x03, 0xd5, 0xc4, 0xec, 0xdc, 0x62, 0x76,
	0x6b, 0xe6, 0x11, 0x74, 0x32, 0xaa, 0xb5, 0xf0, 0x5b, 0x03, 0x77, 0xd8, 0xdb, 0x7b, 0xdc, 0xbc,
	0x4f, 0x1b, 0x8d, 0x90, 0x75, 0x92, 0x78, 0x0e, 0x6d, 0xbc, 0xe5, 0x85, 0xdf, 0xa6, 0x6c, 0xbe,
	0xf9, 0x9a, 0x61, 0x2f, 0x64, 0xf9, 0x39, 0xf8, 0x89, 0x41, 0x6f, 0xaa, 0xb2, 0xd7, 0x79, 0x14,
	0xd2, 0xa5, 0x25, 0xc7, 0xd8, 0x2d, 0xc7, 0x9c, 0xda, 0x31, 0xaa, 0x6e, 0x6c, 0x4c, 0x42, 0x6d,
	0xa2, 0xea, 0x10, 0x95, 0xf1, 0x6f, 0x54, 0x1c, 0x53, 0xa3, 0x28, 0x8e, 0x48, 0xbc, 0x00, 0x1e,
	0x15, 0x13, 0x95, 0xee, 0xeb, 0xc2, 0x9a, 0x7c, 0x4d, 0x19, 0x5b, 0x94, 0xf1, 0x41, 0x3c, 0xf8,
	0x02, 0xdc, 0xa9, 0xca, 0xc4, 0x67, 0xe0, 0x55, 0x6a, 0x0a, 0x9f, 0xdd, 0xa9, 0x73, 0x43, 0xa6,
	0x6c, 0xb2, 0x82, 0xef, 0xa1, 0x3b, 0x55, 0xd9, 0xd7, 0x7a, 0x6e, 0x4d, 0x2e, 0x86, 0xe0, 0x4e,
	0x4c, 0x5c, 0xed, 0x7c, 0xb2, 0xb9, 0xb3, 0x4c, 0x18, 0x49, 0xb3, 0x94, 0x98, 0xf2, 0xf4, 0x39,
	0xb8, 0xd2, 0x2c, 0xc5, 0x27, 0x65, 0xb9, 0xee, 0x70, 0x67, 0xef, 0x51, 0x93, 0x3e, 0xd1, 0x71,
	0x8c, 0x2f, 0xbe, 0x64, 0xab, 0x17, 0xbf, 0xb9, 0xf4, 0x54, 0x54, 0x3f, 0x00, 0xc2, 0x2b, 0x9f,
	0x0a, 0xfe, 0x40, 0x74, 0xa1, 0x4d, 0xaf, 0x3d, 0x67, 0xa2, 0x03, 0xee, 0xb1, 0xc9, 0xb8, 0x23,
	0xfa, 0xd0, 0x7d, 0x19, 0x86, 0xa5, 0x15, 0xdc, 0x15, 0x1c, 0x6f, 0x79, 0x62, 0xae, 0x2a, 0x73,
	0x78, 0x0b, 0x37, 0x91, 0x5b, 0xbc, 0x8d, 0x4c, 0x38, 0x1a, 0x7c, 0x4b, 0xf4, 0xa0, 0x53, 0xbd,
	0x44, 0xbc, 0x23, 0x1e, 0x42, 0xef, 0x8d, 0x51, 0xe1, 0x6b, 0x95, 0xe8, 0xa9, 0xca, 0xb8, 0x87,
	0x5b, 0xe8, 0x8d, 0xe0, 0x80, 0x89, 0xaf, 0xd2, 0x50, 0x1a, 0x93, 0xf0, 0x9e, 0xd8, 0x06, 0xef,
	0x48, 0x2f, 0x4b, 0xb6, 0x3e, 0x22, 0xa9, 0x67, 0xda, 0x1e, 0x69, 0xcb, 0x1f, 0xa2, 0x8e, 0x03,
	0xad, 0x72, 0x3b, 0xd6, 0xca, 0x72, 0x8e, 0x70, 0xb6, 0x2e, 0xac, 0x4e, 0xa6, 0xc5, 0x82, 0x3f,
	0xc1, 0xdc, 0xfa, 0x0d, 0xe0, 0xff, 0xc7, 0x03, 0x4b, 0x79, 0x33, 0x9c, 0x6e, 0x7e, 0x40, 0xd9,
	0xc8, 0x3a, 0x5b, 0xa7, 0x73, 0x8e, 0x97, 0x7a, 0xfb, 0x30, 0x8d, 0x2c, 0x22, 0xec, 0x3c, 0xc7,
	0x1f, 0x1f, 0x68, 0xaa, 0x2c, 0xf8, 0x7b, 0xe4, 0x7b, 0x19, 0x86, 0x63, 0x15, 0xc7, 0x05, 0x3f,
	0x47, 0xbe, 0xb2, 0xe8, 0x32, 0x10, 0x21, 0xc1, 0x4c, 0x5b, 0xa2, 0x24, 0x82, 0x1f, 0xc4, 0x23,
	0xe8, 0x4f, 0xce, 0xf5, 0xfc, 0xa2, 0xe1, 0x8c, 0x85, 0x80, 0x9d, 0x99, 0xb6, 0x25, 0xe7, 0x4b,
	0x6b, 0xf3, 0x82, 0x27, 0xb8, 0x11, 0x7f, 0x53, 0x49, 0xd7, 0x4c, 0x5b, 0x6e, 0x6e, 0x45, 0x26,
	0x71, 0xce, 0xb3, 0x17, 0x7b, 0xe0, 0xd5, 0x6e, 0x51, 0x73, 0x33, 0x35, 0x47, 0x73, 0x3c, 0x68,
	0xe1, 0x54, 0x95, 0xde, 0x8c, 0xcd, 0x8a, 0x3b, 0x18, 0xa2, 0x16, 0xbb, 0xe3, 0x8f, 0xff, 0xb8,
	0xde, 0x65, 0x7f, 0x5e, 0xef, 0xb2, 0xbf, 0xaf, 0x77, 0xd9, 0xaf, 0xff, 0xec, 0x3e, 0xf8, 0x16,
	0x46, 0x9f, 0x7e, 0x59, 0x99, 0x7f, 0xb6, 0x45, 0xff, 0x10, 0x3e, 0xff, 0x37, 0x00, 0x00, 0xff,
	0xff, 0x3c, 0x44, 0xae, 0xa3, 0x2f, 0x08, 0x00, 0x00,
}

func (m *CmdHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CmdHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CmdHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintGame(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.Cmd != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.Cmd))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserLoginInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserLoginInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserLoginInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintGame(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPlayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPlayer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPlayer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PosY != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.PosY))
		i--
		dAtA[i] = 0x50
	}
	if m.PosX != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.PosX))
		i--
		dAtA[i] = 0x48
	}
	if m.Speed != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.Speed))
		i--
		dAtA[i] = 0x40
	}
	if m.Power != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x38
	}
	if m.Maxbomb != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.Maxbomb))
		i--
		dAtA[i] = 0x30
	}
	if m.Curbomb != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.Curbomb))
		i--
		dAtA[i] = 0x28
	}
	if m.Hp != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.Hp))
		i--
		dAtA[i] = 0x20
	}
	if m.Score != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintGame(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BombData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BombData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BombData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExistTm != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.ExistTm))
		i--
		dAtA[i] = 0x30
	}
	if m.Owner != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.Owner))
		i--
		dAtA[i] = 0x28
	}
	if m.Power != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x20
	}
	if m.PosY != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.PosY))
		i--
		dAtA[i] = 0x18
	}
	if m.PosX != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.PosX))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgMove) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Way != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.Way))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgPutBomb) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPutBomb) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPutBomb) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.None {
		i--
		if m.None {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RetRoleScene) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetRoleScene) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetRoleScene) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Power != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x20
	}
	if m.Hp != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.Hp))
		i--
		dAtA[i] = 0x18
	}
	if m.PosY != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.PosY))
		i--
		dAtA[i] = 0x10
	}
	if m.PosX != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.PosX))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RetRoleDeath) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetRoleDeath) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetRoleDeath) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Score != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x20
	}
	if m.LiveTime != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.LiveTime))
		i--
		dAtA[i] = 0x18
	}
	if m.KillId != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.KillId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.KillName) > 0 {
		i -= len(m.KillName)
		copy(dAtA[i:], m.KillName)
		i = encodeVarintGame(dAtA, i, uint64(len(m.KillName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RetErrorMsgCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetErrorMsgCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetErrorMsgCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Params != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.Params))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgBomb) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBomb) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBomb) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CreateTime != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.CreateTime))
		i--
		dAtA[i] = 0x60
	}
	if m.IsDelete {
		i--
		if m.IsDelete {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.Y != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.Y))
		i--
		dAtA[i] = 0x38
	}
	if m.X != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.X))
		i--
		dAtA[i] = 0x30
	}
	if m.Own != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.Own))
		i--
		dAtA[i] = 0x18
	}
	if m.Id != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ScenePlayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScenePlayer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScenePlayer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsMove {
		i--
		if m.IsMove {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.Y != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Y))))
		i--
		dAtA[i] = 0x3d
	}
	if m.X != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.X))))
		i--
		dAtA[i] = 0x35
	}
	if m.State != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x28
	}
	if m.Speed != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Speed))))
		i--
		dAtA[i] = 0x25
	}
	if m.Power != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x18
	}
	if m.BombNum != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.BombNum))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RetUpdateSceneMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetUpdateSceneMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetUpdateSceneMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Bombs) > 0 {
		for iNdEx := len(m.Bombs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bombs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGame(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Players) > 0 {
		for iNdEx := len(m.Players) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Players[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGame(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Y != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Y))))
		i--
		dAtA[i] = 0x1d
	}
	if m.X != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.X))))
		i--
		dAtA[i] = 0x15
	}
	if m.Id != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MapGridData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapGridData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapGridData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsCanDestoryWall {
		i--
		if m.IsCanDestoryWall {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.IsWall {
		i--
		if m.IsWall {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.IsBoom {
		i--
		if m.IsBoom {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Y != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.Y))
		i--
		dAtA[i] = 0x10
	}
	if m.X != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.X))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Map) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Map) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Map) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MapGrids) > 0 {
		for iNdEx := len(m.MapGrids) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MapGrids[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGame(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MapVector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapVector) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapVector) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Col) > 0 {
		for iNdEx := len(m.Col) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Col[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGame(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MapVector_Row) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapVector_Row) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapVector_Row) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.X) > 0 {
		dAtA2 := make([]byte, len(m.X)*10)
		var j1 int
		for _, num := range m.X {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintGame(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGame(dAtA []byte, offset int, v uint64) int {
	offset -= sovGame(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CmdHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cmd != 0 {
		n += 1 + sovGame(uint64(m.Cmd))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserLoginInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgPlayer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGame(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	if m.Score != 0 {
		n += 1 + sovGame(uint64(m.Score))
	}
	if m.Hp != 0 {
		n += 1 + sovGame(uint64(m.Hp))
	}
	if m.Curbomb != 0 {
		n += 1 + sovGame(uint64(m.Curbomb))
	}
	if m.Maxbomb != 0 {
		n += 1 + sovGame(uint64(m.Maxbomb))
	}
	if m.Power != 0 {
		n += 1 + sovGame(uint64(m.Power))
	}
	if m.Speed != 0 {
		n += 1 + sovGame(uint64(m.Speed))
	}
	if m.PosX != 0 {
		n += 1 + sovGame(uint64(m.PosX))
	}
	if m.PosY != 0 {
		n += 1 + sovGame(uint64(m.PosY))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BombData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGame(uint64(m.Id))
	}
	if m.PosX != 0 {
		n += 1 + sovGame(uint64(m.PosX))
	}
	if m.PosY != 0 {
		n += 1 + sovGame(uint64(m.PosY))
	}
	if m.Power != 0 {
		n += 1 + sovGame(uint64(m.Power))
	}
	if m.Owner != 0 {
		n += 1 + sovGame(uint64(m.Owner))
	}
	if m.ExistTm != 0 {
		n += 1 + sovGame(uint64(m.ExistTm))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgMove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Way != 0 {
		n += 1 + sovGame(uint64(m.Way))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgPutBomb) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.None {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RetRoleScene) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PosX != 0 {
		n += 1 + sovGame(uint64(m.PosX))
	}
	if m.PosY != 0 {
		n += 1 + sovGame(uint64(m.PosY))
	}
	if m.Hp != 0 {
		n += 1 + sovGame(uint64(m.Hp))
	}
	if m.Power != 0 {
		n += 1 + sovGame(uint64(m.Power))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RetRoleDeath) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.KillName)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	if m.KillId != 0 {
		n += 1 + sovGame(uint64(m.KillId))
	}
	if m.LiveTime != 0 {
		n += 1 + sovGame(uint64(m.LiveTime))
	}
	if m.Score != 0 {
		n += 1 + sovGame(uint64(m.Score))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RetErrorMsgCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != 0 {
		n += 1 + sovGame(uint64(m.RetCode))
	}
	if m.Params != 0 {
		n += 1 + sovGame(uint64(m.Params))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgBomb) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGame(uint64(m.Id))
	}
	if m.Own != 0 {
		n += 1 + sovGame(uint64(m.Own))
	}
	if m.X != 0 {
		n += 1 + sovGame(uint64(m.X))
	}
	if m.Y != 0 {
		n += 1 + sovGame(uint64(m.Y))
	}
	if m.IsDelete {
		n += 2
	}
	if m.CreateTime != 0 {
		n += 1 + sovGame(uint64(m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ScenePlayer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGame(uint64(m.Id))
	}
	if m.BombNum != 0 {
		n += 1 + sovGame(uint64(m.BombNum))
	}
	if m.Power != 0 {
		n += 1 + sovGame(uint64(m.Power))
	}
	if m.Speed != 0 {
		n += 5
	}
	if m.State != 0 {
		n += 1 + sovGame(uint64(m.State))
	}
	if m.X != 0 {
		n += 5
	}
	if m.Y != 0 {
		n += 5
	}
	if m.IsMove {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RetUpdateSceneMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGame(uint64(m.Id))
	}
	if m.X != 0 {
		n += 5
	}
	if m.Y != 0 {
		n += 5
	}
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	if len(m.Bombs) > 0 {
		for _, e := range m.Bombs {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MapGridData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.X != 0 {
		n += 1 + sovGame(uint64(m.X))
	}
	if m.Y != 0 {
		n += 1 + sovGame(uint64(m.Y))
	}
	if m.IsBoom {
		n += 2
	}
	if m.IsWall {
		n += 2
	}
	if m.IsCanDestoryWall {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Map) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MapGrids) > 0 {
		for _, e := range m.MapGrids {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MapVector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Col) > 0 {
		for _, e := range m.Col {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MapVector_Row) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.X) > 0 {
		l = 0
		for _, e := range m.X {
			l += sovGame(uint64(e))
		}
		n += 1 + sovGame(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovGame(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGame(x uint64) (n int) {
	return sovGame(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CmdHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CmdHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CmdHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmd", wireType)
			}
			m.Cmd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cmd |= MsgTypeCmd(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserLoginInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserLoginInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserLoginInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPlayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPlayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPlayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hp", wireType)
			}
			m.Hp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Curbomb", wireType)
			}
			m.Curbomb = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Curbomb |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maxbomb", wireType)
			}
			m.Maxbomb = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Maxbomb |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Speed", wireType)
			}
			m.Speed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Speed |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosX", wireType)
			}
			m.PosX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosX |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosY", wireType)
			}
			m.PosY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosY |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BombData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BombData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BombData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosX", wireType)
			}
			m.PosX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosX |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosY", wireType)
			}
			m.PosY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosY |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			m.Owner = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Owner |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExistTm", wireType)
			}
			m.ExistTm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExistTm |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMove) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMove: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMove: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Way", wireType)
			}
			m.Way = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Way |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPutBomb) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPutBomb: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPutBomb: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field None", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.None = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetRoleScene) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetRoleScene: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetRoleScene: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosX", wireType)
			}
			m.PosX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosX |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosY", wireType)
			}
			m.PosY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosY |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hp", wireType)
			}
			m.Hp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetRoleDeath) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetRoleDeath: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetRoleDeath: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KillName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillId", wireType)
			}
			m.KillId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KillId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveTime", wireType)
			}
			m.LiveTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetErrorMsgCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetErrorMsgCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetErrorMsgCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			m.Params = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Params |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBomb) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBomb: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBomb: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Own", wireType)
			}
			m.Own = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Own |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			m.X = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.X |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			m.Y = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Y |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDelete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDelete = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScenePlayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScenePlayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScenePlayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BombNum", wireType)
			}
			m.BombNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BombNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Speed", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Speed = float32(math.Float32frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.X = float32(math.Float32frombits(v))
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Y = float32(math.Float32frombits(v))
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMove", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsMove = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetUpdateSceneMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetUpdateSceneMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetUpdateSceneMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.X = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Y = float32(math.Float32frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &ScenePlayer{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bombs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bombs = append(m.Bombs, &MsgBomb{})
			if err := m.Bombs[len(m.Bombs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapGridData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MapGridData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MapGridData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			m.X = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.X |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			m.Y = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Y |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBoom", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBoom = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsWall", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsWall = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCanDestoryWall", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCanDestoryWall = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Map) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Map: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Map: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapGrids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MapGrids = append(m.MapGrids, &MapGridData{})
			if err := m.MapGrids[len(m.MapGrids)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapVector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MapVector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MapVector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Col", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Col = append(m.Col, &MapVector_Row{})
			if err := m.Col[len(m.Col)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapVector_Row) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Row: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Row: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v CellType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= CellType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.X = append(m.X, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGame
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGame
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.X) == 0 {
					m.X = make([]CellType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v CellType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= CellType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.X = append(m.X, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGame(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGame
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGame
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGame
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGame
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGame
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGame
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGame        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGame          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGame = fmt.Errorf("proto: unexpected end of group")
)
